name: Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: true
        type: string
      publish_npm:
        description: 'Publish to NPM'
        required: false
        default: true
        type: boolean
      publish_cargo:
        description: 'Publish to Crates.io'
        required: false
        default: true
        type: boolean
      publish_docker:
        description: 'Publish to Docker Hub'
        required: false
        default: true
        type: boolean

jobs:
  publish-npm:
    name: Publish NPM Package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.publish_npm == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Install Dependencies
        run: |
          cd scoutquest-js
          pnpm install

      - name: Build Package
        run: |
          cd scoutquest-js
          pnpm build

      - name: Setup NPM Authentication
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish to NPM
        run: |
          cd scoutquest-js
          pnpm publish --access public --no-git-checks

  publish-cargo:
    name: Publish Cargo Crate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.publish_cargo == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            scoutquest-rust/target
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Cargo Authentication
        run: |
          mkdir -p ~/.cargo
          echo "[registry]" > ~/.cargo/credentials
          echo "token = \"${{ secrets.CARGO_TOKEN }}\"" >> ~/.cargo/credentials

      - name: Build Package
        run: |
          cd scoutquest-rust
          cargo build --release

      - name: Publish to Crates.io
        run: |
          cd scoutquest-rust
          cargo publish

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.publish_docker == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Generate Cargo.lock
        run: |
          cd scoutquest-server
          cargo check --locked || cargo update

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./scoutquest-server
          file: ./scoutquest-server/Dockerfile
          push: true
          tags: |
            scoutquest/server:latest
            scoutquest/server:${{ steps.version.outputs.version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.publish_npm == true)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Build Documentation
        run: make docs-build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          force_orphan: true

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [publish-npm, publish-cargo, publish-docker, publish-docs]
    if: always()
    steps:
      - name: Check Results
        run: |
          echo "Publication Results:"
          echo "NPM: ${{ needs.publish-npm.result }}"
          echo "Cargo: ${{ needs.publish-cargo.result }}"
          echo "Docker: ${{ needs.publish-docker.result }}"
          echo "Docs: ${{ needs.publish-docs.result }}"

          if [ "${{ needs.publish-npm.result }}" == "failure" ] || \
             [ "${{ needs.publish-cargo.result }}" == "failure" ] || \
             [ "${{ needs.publish-docker.result }}" == "failure" ] || \
             [ "${{ needs.publish-docs.result }}" == "failure" ]; then
            echo "❌ Some publications failed"
            exit 1
          else
            echo "✅ All publications successful"
          fi
